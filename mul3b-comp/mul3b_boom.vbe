-- VHDL data flow description generated from `mul3b_boom`
--		date : Wed Oct 28 14:33:21 2020


-- Entity Declaration

ENTITY mul3b_boom IS
  PORT (
  x : in bit_vector(2 DOWNTO 0) ;	-- x
  y : in bit_vector(2 DOWNTO 0) ;	-- y
  z : out bit_vector(5 DOWNTO 0) ;	-- z
  vdd : in BIT;	-- vdd
  vss : in BIT	-- vss
  );
END mul3b_boom;


-- Architecture Declaration

ARCHITECTURE behaviour_data_flow OF mul3b_boom IS
  SIGNAL aux0 : BIT;		-- aux0
  SIGNAL aux1 : BIT;		-- aux1
  SIGNAL aux2 : BIT;		-- aux2
  SIGNAL aux3 : BIT;		-- aux3
  SIGNAL aux4 : BIT;		-- aux4
  SIGNAL aux5 : BIT;		-- aux5
  SIGNAL aux6 : BIT;		-- aux6
  SIGNAL aux7 : BIT;		-- aux7
  SIGNAL aux9 : BIT;		-- aux9
  SIGNAL aux10 : BIT;		-- aux10

BEGIN
  aux10 <= (y(2) AND x(0));
  aux9 <= ((NOT(aux2) AND x(2)) AND y(2));
  aux7 <= (aux3 AND x(2));
  aux6 <= (aux2 AND NOT(x(2)));
  aux5 <= (NOT(y(2)) OR x(0));
  aux4 <= (NOT(aux3) AND x(2));
  aux3 <= NOT(x(1) OR y(1));
  aux2 <= (x(1) AND y(1));
  aux1 <= (y(1) AND x(0));
  aux0 <= (x(0) AND y(0));

z (0) <= aux0;

z (1) <= (((x(1) XOR aux1) AND y(0)) OR (aux1 AND NOT(y(0)
)));

z (2) <= (((((x(2) XOR y(2)) AND x(0)) OR ((aux2 XOR x(2))
 AND NOT(x(0)))) AND y(0)) OR ((aux2 XOR aux10) 
AND NOT(y(0))));

z (3) <= ((((NOT(y(1)) AND NOT(x(2))) OR NOT(aux10)) AND (
(NOT(x(1)) AND y(1)) OR y(2)) AND (x(1) XOR (y(1) 
AND x(2)))) OR (((((aux7 AND y(2)) OR (aux6 AND NOT(
y(2)))) AND x(0)) OR (x(1) AND x(2) AND y(2) AND NOT(
x(0)))) AND y(0)) OR (aux5 AND (y(1) OR y(2)) AND 
aux4 AND NOT(y(0))));

z (4) <= (((aux7 OR aux6) AND aux10) OR (aux9 AND NOT(x(0)
)) OR (aux2 AND x(2) AND aux5 AND y(0)) OR (aux9 
AND x(0) AND NOT(y(0))));

z (5) <= ((aux2 OR aux0) AND aux4 AND y(2));
END;
